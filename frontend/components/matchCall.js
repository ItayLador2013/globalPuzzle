import { setStatusBarNetworkActivityIndicatorVisible, StatusBar } from 'expo-status-bar';
import { Pressable, ScrollView, StyleSheet, Text, View, Image, ImageBackground, Dimensions, Modal, Animated, Easing, PanResponder, FlatList, findNodeHandle, TextInput, Keyboard, Platform, PermissionsAndroid } from 'react-native';
import * as React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { Entypo, Ionicons, FontAwesome5, Fontisto, Octicons, MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons'; 
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Haptics from 'expo-haptics';
import storage from '../storage';
import * as Notifications from "expo-notifications";
import { Camera } from 'expo-camera';
import { Audio } from 'expo-av';
import AgoraUIKit from 'agora-rn-uikit';
import 'expo-dev-client';
import {ClientRoleType, createAgoraRtcEngine, IRtcEngine, RtcSurfaceView, ChannelProfileType, } from 'react-native-agora';
import { SafeAreaView } from 'react-native-safe-area-context';
import { UserJoined } from 'agora-rn-uikit/src/Reducer';
import profileSet from './profileSet';

const appId = '8d6cd4c659d148efb99750db2b40f2df';
const auth = 'e0688dd1f27d49fbaf5dc2a13163628d';
const uid = 0;

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: false,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
}); 

export default function MatchCall({navigation, route}) {
    const server = storage.server
    const [hasPermission, setHasPermission] = React.useState(null);
    const [cameraType, setCameraType] = React.useState(Camera.Constants.Type.front);
    const cameraRef = React.useRef(null);
    const other = route.params.other
    const [sound, setSound] = React.useState(); 
    const [selected, setSelected] = React.useState("");
    const [videoCall, setVideoCall] = React.useState(true)
    const token = route.params.token
    const user = route.params.user
    const [channel, setChannel] = React.useState("")
    const notificationListener = React.useRef();
    const responseListener = React.useRef();
    const [up, setUp] = React.useState("")
    const [friend, setFriend] = React.useState(route.params.friend)
    const [requested, setRequested] = React.useState(false)
    const [beingRequested, setBeingRequested] = React.useState(false)

    function showMessage(msg) {
      setMessage(msg);
    }

    React.useEffect(() => {
        let ch = ""
        let arr = [user, other]
        arr.sort()
        for(let i=0; i < arr.length; i++){
            ch += arr[i] 
            console.log(arr[i])
        }
        setChannel(ch)
    }, [])


    React.useEffect(() => {

        notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
           
          notif = notification.request.content
          
            console.log(notif)
    
          if(notif.data.type=="endcall"){   
            console.log("Hi")
            endMatch()
          } else if(notif.data.type=="request" && notif.data.user == other){
            setRequested(true)
            setBeingRequested(true)
          } 
          
        });  
      
    
        responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
            if(notif.data.type=="endcall"){  
                endMatch()
            }
        });
    
        return () => {
          Notifications.removeNotificationSubscription(notificationListener.current);
          Notifications.removeNotificationSubscription(responseListener.current);
        };
      }, []);

    const playSound = async () => {
        console.log('Loading Sound');
        const { sound } = await Audio.Sound.createAsync( require('../assets/calling.mp3')
        );
        setSound(sound);
    
        console.log('Playing Sound');
        await sound.playAsync();
        sound.setIsLoopingAsync(true); // Disable default looping
        
      }
    
 

    React.useEffect(() => { 
        (async () => {    
          const { status } = await Camera.requestCameraPermissionsAsync();
          setHasPermission(status === 'granted');
        })();
      }, []);

      const endMatch = () => {
    
        fetch(server + `home/endMatch/`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({"user":user, "other":other, "token": token })
        })
        navigation.navigate("Home")
      }

      const reverse = () => {
        if(cameraType==Camera.Constants.Type.back){
            setCameraType(Camera.Constants.Type.front)
        } else {
            setCameraType(Camera.Constants.Type.back)
        }
      }

      const press = (what) => {
        setSelected(what)
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)

      }

      const props = {
        connectionData: {
          appId: '8d6cd4c659d148efb99750db2b40f2df',
          channel: channel != null ? channel : "",  
        },
        rtcCallbacks: {
          EndCall: () => endMatch(),  
        },
      };


const FLAGS = {
  "Afghanistan": "ğŸ‡¦ğŸ‡«",
  "Akrotiri": "ğŸ‡¦ğŸ‡¨",
  "Albania": "ğŸ‡¦ğŸ‡±",
  "Algeria": "ğŸ‡©ğŸ‡¿",
  "American Samoa": "ğŸ‡¦ğŸ‡¸",
  "Andorra": "ğŸ‡¦ğŸ‡©",
  "Angola": "ğŸ‡¦ğŸ‡´",
  "Anguilla": "ğŸ‡¦ğŸ‡®",
  "Antigua and BarbBarbuda": "ğŸ‡¦ğŸ‡¬",
  "Argentina": "ğŸ‡¦ğŸ‡·",
  "Armenia": "ğŸ‡¦ğŸ‡²",
  "Aruba": "ğŸ‡¦ğŸ‡¼",
  "Australia": "ğŸ‡¦ğŸ‡º",
  "Austria": "ğŸ‡¦ğŸ‡¹",
  "Azerbaijan": "ğŸ‡¦ğŸ‡¿",
  "Bahrain": "ğŸ‡§ğŸ‡­",
  "Bangladesh": "ğŸ‡§ğŸ‡©",
  "Barbados": "ğŸ‡§ğŸ‡§",
  "Belarus": "ğŸ‡§ğŸ‡¾",
  "Belgium": "ğŸ‡§ğŸ‡ª",
  "Belize": "ğŸ‡§ğŸ‡¿",
  "Benin": "ğŸ‡§ğŸ‡¯",
  "Bermuda": "ğŸ‡§ğŸ‡²",
  "Bhutan": "ğŸ‡§ğŸ‡¹",
  "Bolivia": "ğŸ‡§ğŸ‡´",
  "Bosnia and Herzegovina": "ğŸ‡§ğŸ‡¦",
  "Botswana": "ğŸ‡§ğŸ‡¼",
  "Brazil": "ğŸ‡§ğŸ‡·",
  "British Indian Ocean Territory": "ğŸ‡®ğŸ‡´",
  "British Virgin Islands": "ğŸ‡»ğŸ‡¬",
  "Brunei": "ğŸ‡§ğŸ‡³",
  "Bulgaria": "ğŸ‡§ğŸ‡¬",
  "Burkina Faso": "ğŸ‡§ğŸ‡«",
  "Burundi": "ğŸ‡§ğŸ‡®",
  "Cabo Verde": "ğŸ‡¨ğŸ‡»",
  "Cambodia": "ğŸ‡°ğŸ‡­",
  "Cameroon": "ğŸ‡¨ğŸ‡²",
  "Canada": "ğŸ‡¨ğŸ‡¦",
  "Cayman Islands": "ğŸ‡°ğŸ‡¾",
  "Central African Republic": "ğŸ‡¨ğŸ‡«",
  "Chad": "ğŸ‡¹ğŸ‡©",
  "Chile": "ğŸ‡¨ğŸ‡±",
  "China": "ğŸ‡¨ğŸ‡³",
  "Christmas Island": "ğŸ‡¨ğŸ‡½",
  "Cocos Islands": "ğŸ‡¨ğŸ‡¨",
  "Colombia": "ğŸ‡¨ğŸ‡´",
  "Comoros": "ğŸ‡°ğŸ‡²",
  "Cook Islands": "ğŸ‡¨ğŸ‡°",
  "Costa Rica": "ğŸ‡¨ğŸ‡·",
  "CÃ´te d'Ivoire": "ğŸ‡¨ğŸ‡®",
  "Croatia": "ğŸ‡­ğŸ‡·",
  "Cuba": "ğŸ‡¨ğŸ‡º",
  "CuraÃ§ao": "ğŸ‡¨ğŸ‡¼",
  "Cyprus": "ğŸ‡¨ğŸ‡¾",
  "Czechia": "ğŸ‡¨ğŸ‡¿",
  "Democratic Republic of the Congo": "ğŸ‡¨ğŸ‡©",
  "Denmark": "ğŸ‡©ğŸ‡°",
  "Dhekelia": "ğŸ‡©ğŸ‡ª",
  "Djibouti": "ğŸ‡©ğŸ‡¯",
  "Dominica": "ğŸ‡©ğŸ‡²",
  "Dominican Republic": "ğŸ‡©ğŸ‡´",
  "Ecuador": "ğŸ‡ªğŸ‡¨",
  "Egypt": "ğŸ‡ªğŸ‡¬",
  "El Salvador": "ğŸ‡¸ğŸ‡»",
  "Equatorial Guinea": "ğŸ‡¬ğŸ‡¶",
  "Eritrea": "ğŸ‡ªğŸ‡·",
  "Estonia": "ğŸ‡ªğŸ‡ª",
  "Ethiopia": "ğŸ‡ªğŸ‡¹",
  "Falkland Islands": "ğŸ‡«ğŸ‡°",
  "Faroe Islands": "ğŸ‡«ğŸ‡´",
  "Federated States of Micronesia": "ğŸ‡«ğŸ‡²",
  "Fiji": "ğŸ‡«ğŸ‡¯",
  "Finland": "ğŸ‡«ğŸ‡®",
  "France": "ğŸ‡«ğŸ‡·",
  "French Guiana": "ğŸ‡¬ğŸ‡«",
  "French Polynesia": "ğŸ‡µğŸ‡«",
  "French Southern And Antarctic Lands": "ğŸ‡¹ğŸ‡«",
  "Gabon": "ğŸ‡¬ğŸ‡¦",
  "Georgia": "ğŸ‡¬ğŸ‡ª",
  "Germany": "ğŸ‡©ğŸ‡ª",
  "Ghana": "ğŸ‡¬ğŸ‡­",
  "Gibraltar": "ğŸ‡¬ğŸ‡®",
  "Greece": "ğŸ‡¬ğŸ‡·",
  "Greenland": "ğŸ‡¬ğŸ‡±",
  "Grenada": "ğŸ‡¬ğŸ‡©",
  "Guadeloupe": "ğŸ‡¬ğŸ‡µ",
  "Guam": "ğŸ‡¬ğŸ‡º",
  "Guatemala": "ğŸ‡¬ğŸ‡¹",
  "Guernsey": "ğŸ‡¬ğŸ‡¬",
  "Guinea": "ğŸ‡¬ğŸ‡³",
  "Guinea-Bissau": "ğŸ‡¬ğŸ‡¼",
  "Guyana": "ğŸ‡¬ğŸ‡¾",
  "Haiti": "ğŸ‡­ğŸ‡¹",
  "Honduras": "ğŸ‡­ğŸ‡³",
  "Hong Kong": "ğŸ‡­ğŸ‡°",
  "Hungary": "ğŸ‡­ğŸ‡º",
  "Iceland": "ğŸ‡®ğŸ‡¸",
  "India": "ğŸ‡®ğŸ‡³",
  "Indonesia": "ğŸ‡®ğŸ‡©",
  "Iran": "ğŸ‡®ğŸ‡·",
  "Iraq": "ğŸ‡®ğŸ‡¶",
  "Ireland": "ğŸ‡®ğŸ‡ª",
  "Isle of Man": "ğŸ‡®ğŸ‡²",
  "Israel": "ğŸ‡®ğŸ‡±",
  "Italy": "ğŸ‡®ğŸ‡¹",
  "Jamaica": "ğŸ‡¯ğŸ‡²",
  "Japan": "ğŸ‡¯ğŸ‡µ",
  "Jersey": "ğŸ‡¯ğŸ‡ª",
  "Jordan": "ğŸ‡¯ğŸ‡´",
  "Kazakhstan": "ğŸ‡°ğŸ‡¿",
  "Kenya": "ğŸ‡°ğŸ‡ª",
  "Kiribati": "ğŸ‡°ğŸ‡®",
  "Kosovo": "ğŸ‡½ğŸ‡°",
  "Kuwait": "ğŸ‡°ğŸ‡¼",
  "Kyrgyzstan": "ğŸ‡°ğŸ‡¬",
  "Laos": "ğŸ‡±ğŸ‡¦",
  "Latvia": "ğŸ‡±ğŸ‡»",
  "Lebanon": "ğŸ‡±ğŸ‡§",
  "Lesotho": "ğŸ‡±ğŸ‡¸",
  "Liberia": "ğŸ‡±ğŸ‡·",
  "Libya": "ğŸ‡±ğŸ‡¾",
  "Liechtenstein": "ğŸ‡±ğŸ‡®",
  "Lithuania": "ğŸ‡±ğŸ‡¹",
  "Luxembourg": "ğŸ‡±ğŸ‡º",
  "Macau": "ğŸ‡²ğŸ‡´",
  "Macedonia": "ğŸ‡²ğŸ‡°",
  "Madagascar": "ğŸ‡²ğŸ‡¬",
  "Malawi": "ğŸ‡²ğŸ‡¼",
  "Malaysia": "ğŸ‡²ğŸ‡¾",
  "Maldives": "ğŸ‡²ğŸ‡»",
  "Mali": "ğŸ‡²ğŸ‡±",
  "Malta": "ğŸ‡²ğŸ‡¹",
  "Marshall Islands": "ğŸ‡²ğŸ‡­",
  "Martinique": "ğŸ‡²ğŸ‡¶",
  "Mauritania": "ğŸ‡²ğŸ‡·",
  "Mauritius": "ğŸ‡²ğŸ‡º",
  "Mayotte": "ğŸ‡¾ğŸ‡¹",
  "Mexico": "ğŸ‡²ğŸ‡½",
  "Moldova": "ğŸ‡²ğŸ‡©",
  "Monaco": "ğŸ‡²ğŸ‡¨",
  "Mongolia": "ğŸ‡²ğŸ‡³",
  "Montenegro": "ğŸ‡²ğŸ‡ª",
  "Montserrat": "ğŸ‡²ğŸ‡¸",
  "Morocco": "ğŸ‡²ğŸ‡¦",
  "Mozambique": "ğŸ‡²ğŸ‡¿",
  "Myanmar": "ğŸ‡²ğŸ‡²",
  "Namibia": "ğŸ‡³ğŸ‡¦",
  "Nauru": "ğŸ‡³ğŸ‡·",
  "Nepal": "ğŸ‡³ğŸ‡µ",
  "Netherlands": "ğŸ‡³ğŸ‡±",
  "New Caledonia": "ğŸ‡³ğŸ‡¨",
  "New Zealand": "ğŸ‡³ğŸ‡¿",
  "Nicaragua": "ğŸ‡³ğŸ‡®",
  "Niger": "ğŸ‡³ğŸ‡ª",
  "Nigeria": "ğŸ‡³ğŸ‡¬",
  "Niue": "ğŸ‡³ğŸ‡º",
  "Norfolk Island": "ğŸ‡³ğŸ‡«",
  "North Korea": "ğŸ‡°ğŸ‡µ",
  "Northern Mariana Islands": "ğŸ‡²ğŸ‡µ",
  "Norway": "ğŸ‡³ğŸ‡´",
  "Oman": "ğŸ‡´ğŸ‡²",
  "Pakistan": "ğŸ‡µğŸ‡°",
  "Palau": "ğŸ‡µğŸ‡¼",
  "Palestine": "ğŸ‡µğŸ‡¸",
  "Panama": "ğŸ‡µğŸ‡¦",
  "Papua New Guinea": "ğŸ‡µğŸ‡¬",
  "Paracel Islands": "ğŸ‡µğŸ‡­",
  "Paraguay": "ğŸ‡µğŸ‡¾",
  "Peru": "ğŸ‡µğŸ‡ª",
  "Philippines": "ğŸ‡µğŸ‡­",
  "Pitcairn Islands": "ğŸ‡µğŸ‡³",
  "Poland": "ğŸ‡µğŸ‡±",
  "Portugal": "ğŸ‡µğŸ‡¹",
  "Puerto Rico": "ğŸ‡µğŸ‡·",
  "Qatar": "ğŸ‡¶ğŸ‡¦",
  "Republic of Congo": "ğŸ‡¨ğŸ‡¬",
  "Reunion": "ğŸ‡·ğŸ‡ª",
  "Romania": "ğŸ‡·ğŸ‡´",
  "Russia": "ğŸ‡·ğŸ‡º",
  "Rwanda": "ğŸ‡·ğŸ‡¼",
  "Saint Barthelemy": "ğŸ‡§ğŸ‡±",
  "Saint Kitts and Nevis": "ğŸ‡°ğŸ‡³",
  "Saint Lucia": "ğŸ‡±ğŸ‡¨",
  "Saint Martin": "ğŸ‡²ğŸ‡«",
  "Saint Pierre and Miquelon": "ğŸ‡µğŸ‡²",
  "Saint Vincent and The Grenadines": "ğŸ‡»ğŸ‡¨",
  "Samoa": "ğŸ‡¼ğŸ‡¸",
  "San Marino": "ğŸ‡¸ğŸ‡²",
  "Sao Tome and Principe": "ğŸ‡¸ğŸ‡¹",
  "Saudi Arabia": "ğŸ‡¸ğŸ‡¦",
  "Senegal": "ğŸ‡¸ğŸ‡³",
  "Serbia": "ğŸ‡·ğŸ‡¸",
  "Seychelles": "ğŸ‡¸ğŸ‡¨",
  "Sierra Leone": "ğŸ‡¸ğŸ‡±",
  "Singapore": "ğŸ‡¸ğŸ‡¬",
  "Sint Maarten": "ğŸ‡¸ğŸ‡½",
  "Slovakia": "ğŸ‡¸ğŸ‡°",
  "Slovenia": "ğŸ‡¸ğŸ‡®",
  "Solomon Islands": "ğŸ‡¸ğŸ‡§",
  "Somalia": "ğŸ‡¸ğŸ‡´",
  "South Africa": "ğŸ‡¿ğŸ‡¦",
  "South Georgia and South Sandwich Islands": "ğŸ‡¬ğŸ‡¸",
  "South Korea": "ğŸ‡°ğŸ‡·",
  "South Sudan": "ğŸ‡¸ğŸ‡¸",
  "Spain": "ğŸ‡ªğŸ‡¸",
  "Spratly Islands": "ğŸ‡»ğŸ‡³",
  "Sri Lanka": "ğŸ‡±ğŸ‡°",
  "Sudan": "ğŸ‡¸ğŸ‡©",
  "Suriname": "ğŸ‡¸ğŸ‡·",
  "Svalbard": "ğŸ‡¸ğŸ‡¯",
  "Swaziland": "ğŸ‡¸ğŸ‡¿",
  "Sweden": "ğŸ‡¸ğŸ‡ª",
  "Switzerland": "ğŸ‡¨ğŸ‡­",
  "Syria": "ğŸ‡¸ğŸ‡¾",
  "Taiwan": "ğŸ‡¹ğŸ‡¼",
  "Tajikistan": "ğŸ‡¹ğŸ‡¯",
  "Tanzania": "ğŸ‡¹ğŸ‡¿",
  "Thailand": "ğŸ‡¹ğŸ‡­",
  "The Bahamas": "ğŸ‡§ğŸ‡¸",
  "The Gambia": "ğŸ‡¬ğŸ‡²",
  "Timor-Leste": "ğŸ‡¹ğŸ‡±",
  "Togo": "ğŸ‡¹ğŸ‡¬",
  "Tokelau": "ğŸ‡¹ğŸ‡°",
  "Tonga": "ğŸ‡¹ğŸ‡´",
  "Trinidad and Tobago": "ğŸ‡¹ğŸ‡¹",
  "Tunisia": "ğŸ‡¹ğŸ‡³",
  "Turkey": "ğŸ‡¹ğŸ‡·",
  "Turkmenistan": "ğŸ‡¹ğŸ‡²",
  "Turks and Caicos Islands": "ğŸ‡¹ğŸ‡¨",
  "Tuvalu": "ğŸ‡¹ğŸ‡»",
  "U.S. Virgin Islands": "ğŸ‡»ğŸ‡®",
  "Uganda": "ğŸ‡ºğŸ‡¬",
  "Ukraine": "ğŸ‡ºğŸ‡¦",
  "United Arab Emirates": "ğŸ‡¦ğŸ‡ª",
  "United Kingdom": "ğŸ‡¬ğŸ‡§",
  "United States": "ğŸ‡ºğŸ‡¸",
  "Uruguay": "ğŸ‡ºğŸ‡¾",
  "Uzbekistan": "ğŸ‡ºğŸ‡¿",
  "Vanuatu": "ğŸ‡»ğŸ‡º",
  "Vatican City": "ğŸ‡»ğŸ‡¦",
  "Venezuela": "ğŸ‡»ğŸ‡ª",
  "Vietnam": "ğŸ‡»ğŸ‡³",
  "Wallis and Futuna": "ğŸ‡¼ğŸ‡«",
  "Yemen": "ğŸ‡¾ğŸ‡ª",
  "Zambia": "ğŸ‡¿ğŸ‡²",
  "Zimbabwe": "ğŸ‡¿ğŸ‡¼",
}


const request = () => {
  if(requested){
    setRequested(false)
    fetch(server + `home/unrequest/`, {
      method: "POST",
      headers: {
          "content-type": "application/json",
      },
      body: JSON.stringify({"user":user, "other":other, "token":token})
  })
  } else {
    setRequested(true)
    fetch(server + `home/request/`, {
      method: "POST",
      headers: {
          "content-type": "application/json",
      },
      body: JSON.stringify({"user":user, "other":other, "token":token})
  })
  }
}

const accept = () => {
  setBeingRequested(false)
  fetch(server + `home/acceptRe/`, {
      method: "POST",
      headers: {
          "content-type": "application/json"
      },
      body: JSON.stringify({"user":user, "token":token, "person":other})
  })
  .then(res => res.json())
  .then(res => {
      if(res){
          setUp((up) => up + "a")
      }
  })
}

const decline = () => {
  setBeingRequested(false)
  fetch(server + `home/denyRe/`, {
      method: "POST",
      headers: {
          "content-type": "application/json"
      },
      body: JSON.stringify({"user":user, "token":token, "person":other})
  })
  .then(res => res.json())
  .then(res => {
      if(res){
          setUp((up) => up + "a")
      }
  })
}




      return (
        videoCall &&
        <View style={{width: "100%", height:"100%", backgroundColor: "black"}}>

<SafeAreaView style={{height: "100%", width: "100%",}}>
  <AgoraUIKit
      connectionData={props.connectionData}
      rtcCallbacks={props.rtcCallbacks}
    />
    <Pressable style={{position: "absolute",  alignSelf: "center", marginTop: "10%"}
  } >

      <View style={{flexDirection: "row", alignItems: "center",}}>
        <Text style={{color: "white", fontSize: 30,}}>{other}</Text>
      <Text style={{color: "white", fontSize: 30,}}>{FLAGS[route.params.country]}</Text>
      </View>

      {!friend && 
      <Pressable style={[{alignItems: "center", paddingHorizontal: 10, paddingVertical: 5, backgroundColor: "#386b9c", borderRadius: 20,
      alignSelf: "flex-end", }, selected=="friend" && {opacity: .7}, requested && {opacity:.4}]}
      onPressIn={() => press("friend")} onPressOut={() => setSelected("")} onPress={() => request(other)}
      disabled={requested}
      >
        <Text style={{color: "white", fontSize: 20, textAlign: "center"}}>friend</Text>
      </Pressable>
      }

    </Pressable>
</SafeAreaView>



<Modal
       transparent={true}
        visible={beingRequested}
        animationType="fade"
        >
            
            <Pressable style={{width: "100%", height: "100%", backgroundColor: "rgba(0,0,0,0.5)"}} >


            <SafeAreaView style={{justifyContent: "center", alignItems: "center", display: "flex", position: "relative", width: "100%", height: "100%"}}>
            
            <Text style={{color: "white", fontSize: 23, width: "75%", textAlign: 'center', marginBottom: "10%"}}>{other} has requested to be your freind</Text>
            
                <Pressable onPressIn={() => press("accept")} onPressOut={() => setSelected("")} onPress={() => accept()}
                style={[{minWidth: "10%", borderRadius: 20, paddingHorizontal: 10, 
                paddingVertical: 5, backgroundColor: "#389c53", marginBottom: "5%"}, 
                selected=="accept" && {opacity:.7}]}>
                  <Text style={{color: "white", fontSize: 18}}>Accept</Text>
                </Pressable>

                <Pressable  onPressIn={() => press("deny")} onPressOut={() => setSelected("")} onPress={() => decline()}
                 style={[{minWidth: "10%", borderRadius: 20, paddingHorizontal: 10, 
                 paddingVertical: 5, backgroundColor: "red", marginBottom: "5%"}, 
                 selected=="deny" && {opacity:.7}]}>
                  <Text style={{color: "white", fontSize: 18}}>Deny</Text>
                </Pressable> 

                <Pressable  onPressIn={() => press("ignore")} onPressOut={() => setSelected("")} onPress={() => setBeingRequested(false)}
                style={[{minWidth: "10%", borderRadius: 20, paddingHorizontal: 10, paddingVertical: 5, backgroundColor: "rgba(0,0,0,0)", marginBottom: "5%", borderWidth: 2, borderColor: "white"},
                selected=="ignore" && {opacity:.7}]}>
                  <Text style={{color: "white", fontSize: 18}}>Ignore</Text>
                </Pressable>
             
            
            </SafeAreaView>

            </Pressable>
             
             
        </Modal>
    </View>

    
      
      );


}

const styles = StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
    },
    cameraContainer: {
      flex: 1,
      width: '100%',
      backgroundColor: 'transparent',
      height: "100%"
    },
    camera: {
      flex: 1,
      height: "100%",
    },
    overlay: {
      flex: 1,
      backgroundColor: 'rgba(0, 0, 0, 0.5)', // Adjust the opacity as needed
    },
    button: {
      paddingHorizontal: 25,
      paddingVertical: 4,
      fontWeight: 'bold',
      color: '#ffffff',
      backgroundColor: '#0055cc',
      margin: 5,
  },
  main: {flex: 1, alignItems: 'center'},
  scroll: {flex: 1, backgroundColor: '#ddeeff', width: '100%'},
  scrollContainer: {alignItems: 'center'},
  videoView: {width: '90%', height: 200},
  btnContainer: {flexDirection: 'row', justifyContent: 'center'},
  head: {fontSize: 20},
  info: {backgroundColor: '#ffffe0', color: '#0000ff'}
  });